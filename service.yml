---
# Cannot get this to work for some reason
#AWSTemplateFormatVersion: AWSTemplateFormatVersion: '2010-09-09'

Description: This template creates a new EC2 Container Service (ECS) into an existing cluster.

Metadata:
    Foo:
        Description: 'something clever'
    Bar:
        Description: 'something clever'

# These show up in the console and are expected to be provided by the operator
Parameters:
    Project:
        Description: 'Project name this cluster is has been created for'
        Type: 'String'
        Default: 'Weapon X'

    Creator:
        Description: 'Tool or person creating this cluster'
        Type: 'String'
        Default: 'CloudFormation'

    Environment:
        Description: 'Context the cluster will be used in.  Common values are production, testing and development.'
        Type: 'String'
        Default: 'development'

    Notes:
        Description: 'Notes to apply, normally edited in the console.'
        Type: 'String'
        Default: 'No notes'

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: The ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 4

    Listener:
        Description: The ARN of the Application Load Balancer Listener to register with
        Type: String

    Path:
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: '/echo'

    HealthCheckPath:
        Description: The path on the container side that is used to verify health
        Type: String
        Default: '/operations/health'

    HealthCheckProtocol:
        Description: The protocol on the container side that is used to verify health
        Type: String
        Default: 'HTTP'

    LoadBalancerProtocol:
        Description: The protocol on the ELB side to use
        Type: String
        Default: 'HTTP'

    LoadBalancerPort:
        Description: The port on the ELB side to use
        Type: Number
        Default: 80


Resources:
    PublicTargetGroup:
        Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath:
                Ref: HealthCheckPath
            HealthCheckPort: 'traffic-port'
            HealthCheckProtocol:
                Ref: HealthCheckProtocol
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 3
            Matcher:
                HttpCode: '200-299'
            Port:
                Ref: LoadBalancerPort
            Protocol:
                Ref: LoadBalancerProtocol
            Tags:
                - Key: 'Name'
                  Value:
                      'Fn::Join': [ '-', [ 'Public', 'Default', !Ref 'AWS::StackName' ] ]
                - Key: 'Project'
                  Value:
                      Ref: 'Project'
                - Key: 'Purpose'
                  Value: 'ELB to Service Mapping'
                - Key: 'Creator'
                  Value:
                      Ref: 'Creator'
                - Key: 'Environment'
                  Value:
                      Ref: 'Environment'
                - Key: 'Freetext'
                  Value: 'No notes'
            UnhealthyThresholdCount: 3
            VpcId:
                Ref: VPC

    ListenerRule:
        Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
        Properties:
            Actions:
                - TargetGroupArn:
                      Ref: PublicTargetGroup
                  Type: forward
            Conditions:
                - Field: path-pattern
                  Values:
                      - !Ref Path
            ListenerArn:
                Ref: Listener
            Priority: 1

    Service:
        Type: 'AWS::ECS::Service'
        DependsOn: ListenerRule
        Properties:
            Cluster:
                Ref: Cluster
            DesiredCount:
                Ref: DesiredCount
            LoadBalancers:
                - ContainerName: 'echo-service'
                  ContainerPort: 8080
                  TargetGroupArn:
                      Ref: PublicTargetGroup
            Role:
                Ref: ServiceRole
            TaskDefinition:
                Ref: TaskDefinition

    TaskDefinition:
        Type: 'AWS::ECS::TaskDefinition'
        Properties:
            ContainerDefinitions:
                - Name: echo-service
                  Essential: true
                  Image: kurron/spring-cloud-aws-echo:latest
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group:
                            Ref: AWS::StackName
                        awslogs-region:
                            Ref: AWS::Region
                  Memory: 512
                  PortMappings:
                    - ContainerPort: 8080
            Family: echo-service

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName:
                Ref: AWS::StackName
            RetentionInDays: 7

    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    # I had issues with this role because I couldn't identify exactly what rights were required
    ServiceRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Statement:
                -
                    Sid: ""
                    Effect: "Allow"
                    Principal:
                        Service:
                        - "ecs.amazonaws.com"
                    Action:
                    - "sts:AssumeRole"
            Path: '/'
            Policies:
            -
                PolicyName: !Sub ecs-service-${AWS::StackName}
                PolicyDocument:
                    Statement:
                    -
                        Effect: "Allow"
                        Action:
                            - "ec2:AuthorizeSecurityGroupIngress"
                            - "ec2:Describe*"
                            - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                            - "elasticloadbalancing:DeregisterTargets"
                            - "elasticloadbalancing:Describe*"
                            - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                            - "elasticloadbalancing:RegisterTargets"
                        Resource: "*"
            # documentation suggests that providing a name will cause issues if updates are needed
            RoleName: !Join [ '-', [ !Ref 'AWS::StackName', 'ServiceRole' ] ]


Outputs:
    Service:
        Description: 'EC2 Container Service ID'
        Value:
            Ref: 'Service'
